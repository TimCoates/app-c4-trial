specification {
  element actor
  element system
  element container
  element component
  element webview {
    style {
      shape browser
      color muted
    }
  }

  relationship Cookies {
    color amber
    line solid
  }

  relationship Bearer-Token {
    color red
    line solid
  }
}

model {

  user = actor 'User' {
    description 'A user of the NHS App.'
    style {
      shape person
      icon ./Patient.png
    }
  }

  // NHS App System
  nhsappservice = system 'NHS App Service' {

    style {
      icon ./NHS_Icon.png
    }
    description 'Allows users to access a range of NHS services.'
    link https://nhsarchitecture.horizzon.cloud/sites/4b53edd4-70ee-451c-af34-7d70040b4d2c/objects/9de39153-6f05-f011-af04-04d3b0c2d3c2 'Object in Horizzon'
    link https://nhsd-confluence.digital.nhs.uk/x/f_9xCQ 'Confluence space'
    link https://github.com/TimCoates/app-c4-trial/blob/main/test.mermaid 'Example link how we can link to a Sequence Diagram'

    webApp = container 'Web version of the NHS App' {
      description 'NHS App as viewed in a web browser.'
      technology 'Vue.js, HTML, CSS'
      icon tech:vue
      link https://github.com/NHSDigital/nhsapp/tree/develop/web 'GitHub repo'


      pages = container 'Pages' {
        description 'A collection of Vue.js pages that make up the web app.'
        style {
          icon tech:vue
        }

        advice = component 'advice' {
          style { icon tech:vue }
        }

        appointments = component 'appointments' {
          style { icon tech:vue }
        }

        authReturn = component 'auth-return' {
          style { icon tech:vue }
        }

        biometricsRegistration = component 'biometrics-registration' {
          style { icon tech:vue }
        }

        gpRegistration = component 'gp-registration' {
          style { icon tech:vue }
        }

        gpSessionOnDemand = component 'gp-session-on-demand' {
          style { icon tech:vue }
        }

        gpc = component 'gpc' {
          style { icon tech:vue }
        }

        healthRecords = component 'health-records' {
          style { icon tech:vue }
        }

        linkedProfiles = component 'linked-profiles' {
          style { icon tech:vue }
        }

        messages = component 'messages' {
          style { icon tech:vue }
        }

        more = component 'more' {
          style { icon tech:vue }
        }

        notifications = component 'notifications' {
          style { icon tech:vue }
        }

        organDonation = component 'organ-donation' {
          style { icon tech:vue }
        }

        prescriptions = component 'prescriptions' {
          style { icon tech:vue }
        }

        redirector = component 'redirector' {
          style { icon tech:vue }
        }

        silverIntegration = component 'silver-integration' {
          style { icon tech:vue }
        }

        switchProfile = component 'switch-profile' {
          style { icon tech:vue }
        }

        uplift = component 'uplift' {
          style { icon tech:vue }
        }
      }

      components = container 'Components' {
        description 'A collection of Vue.js components that make up the web app.'
        style {
          icon tech:vue
        }
        
        appointments = component 'Appointments' {
          description 'Allows users to view and manage their appointments.'
          style {
            icon tech:vue
          }
        }

        errors = component 'Error Handling' {
          description 'Handles errors in the web app.'
          style {
            icon tech:vue
          }
        }

        gp-medical-records = component 'GP Medical Records' {
          description 'Allows users to view their GP medical records.'
          style {
            icon tech:vue
          }
        }

        gp-messages = component 'GP Messages' {
          description 'Allows users to view and send messages from their GP.'
          style {
            icon tech:vue
          }
        }

        gp-test-results = component 'GP Test Results' {
          description 'Allows users to view their GP test results.'
          style {
            icon tech:vue
          }
        }

        gpc = component 'GP Connect' {
          description 'Allows users to access GP Connect services.'
          style {
            icon tech:vue
          }
        }

        gpInfo = component 'GP Info' {
          description 'Displays information about the user\'s GP practice.'
          style {
            icon tech:vue
          }
        }

        linkedprofiles = component 'linked profiles' {
          description 'Allows users to manage linked profiles.'
          style {
            icon tech:vue
          }
        }

        menuItems = component 'Menu Items' {
          description 'Handles the menu items in the web app.'
          style {
            icon tech:vue
          }
        }

        messaging = component 'Messaging' {
          description 'Handles messaging functionality in the web app.'
          style {
            icon tech:vue
          }
        }

        myrecord = component 'My Record' {
          description 'Allows users to view their medical records.'
          style {
            icon tech:vue
          }
        }

        nhsukfrontend = component 'NHS.UK Frontend' {
          description 'The NHS.UK Frontend is a library of styles, components and patterns for building NHS digital services.'
          style {
            icon tech:vue
          }
        }

        nominatedPharmacy = component 'Nominated Pharmacy' {
          description 'Allows users to manage their nominated pharmacy.'
          style {
            icon tech:vue
          }
        }

        onlineConsultations = component 'Online Consultations' {
          description 'Allows users to access online consultations.'
          style {
            icon tech:vue
          }
        }

        organDonation = component 'Organ Donation' {
          description 'Allows users to manage their organ donation preferences.'
          style {
            icon tech:vue
          }
        }

        prescriptions = component 'Prescriptions' {
          description 'Allows users to view and manage their prescriptions.'
          style {
            icon tech:vue
          }
        }

        redirector = component 'Redirector' {
          description 'Handles redirection within the web app.'
          style {
            icon tech:vue
          }
        }

        shutters = component 'Shutters' {
          description 'Handles shutter functionality in the web app.'
          style {
            icon tech:vue
          }
        }

        switchProfile = component 'Switch Profile' {
          description 'Allows users to switch between profiles.'
          style {
            icon tech:vue
          }
        }

        uplift = component 'Uplift' {
          description 'Handles uplift functionality in the web app.'
          style {
            icon tech:vue
          }
        }

        widgets = component 'Widgets' {
          description 'Contains widgets in the web app.'
          style {
            icon tech:vue
          }
        }
      }

    }

    NativeApp = container 'Native App' {
      link https://nhsarchitecture.horizzon.cloud/sites/4b53edd4-70ee-451c-af34-7d70040b4d2c/objects/97e39153-6f05-f011-af04-04d3b0c2d3c2 'Object in Aalto'

      style {
        icon ./NHS_Icon.png
      }

      androidapp = container 'Native Android App' {
        description 'Native Android App that allows users to access a range of NHS services.'
        link https://github.com/NHSDigital/nhsapp-android 'Code repository'
        style {
          icon tech:kotlin
          shape mobile
        }

        androidapplogic = container 'App Logic' {
          description 'Runs the native app functionality.'
          style {
            icon tech:kotlin
          }
        }

        androidwebview = webview 'Web View' {
          description 'An Andoid WebView component that renders web content within the app.'
          link https://developer.android.com/reference/android/webkit/WebView 'Android WebView documentation'
          icon tech:chrome
        }
        androidapplogic -> androidwebview 'Drives' {
          description 'The Android native code instructs the WebView control to load specific URLs. The WebView then displays the web content in the app.'
        }
      }

      iosapp = container 'Native iOS App' {
        description 'Native iOS App that allows users to access a range of NHS services.'
        link https://github.com/NHSDigital/nhsapp-ios 'Code repository'
        style {
          icon tech:swift
          shape mobile
        }

        iosapplogic = container 'App Logic' {
          description 'Runs the native app functionality.'
          style {
            icon tech:swift
          }
        }

        ioswebview = webview 'Web View' {
          description 'An iOS WebView control, that renders web content within the app.'
          link https://developer.apple.com/design/human-interface-guidelines/web-views 'Apple WebView documentation'
          icon tech:apple-safari
        }
        iosapplogic -> ioswebview 'The iOS native code instructs the WebView control to load specific URLs. The WebView then displays the web content in the app.'
      }
      
    }

    NativeApp.androidapp.androidapplogic -[Cookies]-> backend.sessionapi {
      title 'Creates and gets session'
      description '''
      To create a session, calls:
      
      `POST /v1/session`

      To get a session, calls:

      `GET /v1/session`
      '''
      technology 'REST'
      link https://nhsd-confluence.digital.nhs.uk/spaces/NO/pages/608909289/Backend+API+-+User+Session+Creation 'Session creation mechanism'
    }

    NativeApp.iosapp.iosapplogic -[Cookies]-> backend.sessionapi {
      title 'Creates and gets session'
      description '''
      To create a session, calls:
      
      `POST /v1/session`

      To get a session, calls:

      `GET /v1/session`
      '''
      technology 'REST'
      link https://nhsd-confluence.digital.nhs.uk/spaces/NO/pages/608909289/Backend+API+-+User+Session+Creation 'Session creation mechanism'
    }

    backend = container 'Backend' {
      description 'A collection of components that handle API requests from the Native App and Web App, and communicate with external services.'

      style {
        icon ./NHS_Icon.png
      }

      monolith = container 'App backend monolith' {
        description 'Handles App backend calls.'
        technology 'C# DotNet Kubernetes Pod'
        link https://github.com/NHSDigital/nhsapp/tree/develop/backendworker 'Code repository'
        style {
          icon tech:csharp
          opacity 10%
        }

        sjrapi = component 'SJR API' {
          description 'Handles retrieval of SJR'
          style {
            icon tech:csharp
          }
        }

        pfsapi = component {
          title 'PFS API'
          description '''
          Handles interactions with PFS and other backend App services

          Served at `https://api.nhsapp.service.nhs.uk/v1`

          + `GET /session`
          + `POST /session`
          + `DELETE /session`
          + `GET /patient/prescriptions?fromDate=YYYY-MM-DDTHH:MM:SS+01:00`
          + `POST /patient/asserted-login-identity`
          + `PUT /session/gp-session-on-demand`
          + `GET /patient/configuration`
          + `POST /log`
          + `GET /patient/journey-configuration`
          + `GET /patient/terms-and-conditions/consent`
          + `GET /api/users/me/messages/metadata`

          '''
          link https://github.com/NHSDigital/nhsapp/tree/develop/backendworker/NHSOnline.Backend.PfsApi 'GitHub source code'
          link https://github.com/NHSDigital/nhsapp/blob/3faa38effc8d6afa89d29763185bc841fca67504/backendworker/README.md 'README.md'
          link https://nhsd-confluence.digital.nhs.uk/spaces/NO/pages/583842081/NHS+PFS+-+API+Design#NHSPFSAPIDesign-PFSMonolith 'Confluence description'
          style {
            icon tech:csharp
          }
        }

        sessionapi = component 'Session API' {
          description 'Handles session management'
          style {
            icon tech:csharp
          }
        }

        userinfodevice = component 'Users Info & Devices' {
          description 'Holds user and device information.'
          style {
            icon tech:cosmosdb
            shape cylinder
          }
        }

        sessions = component 'Sessions' {
          description 'Holds session information.'
          style {
            icon tech:cosmosdb
            shape cylinder
          }
        }

        sessionapi -> sessions 'Reads from and writes to database.'
        sessionapi -> userinfodevice 'Reads from and writes to database.'
        pfsapi -> sjrapi 'Makes API Calls To'
      }

      secondaryCareAdapterPod = container {
        title 'Secondary Care Adapter Pod'
        description 'Handles communication with the Wayfinder Patient Care Aggregator.'
        technology 'Kubernetes'
        style {
          icon tech:kubernetes
        }

        secondaryCareAdapterNGinx = component {
          title 'Secondary Care Adapter NGINX'
          description 'Sidecar container for the Secondary Care Adapter.'
          style {
            icon tech:nginx
            color slate
          }
        }

        secondaryCareAdapter = container 'Secondary Care Adapter' {
          description 'Handles communication with Wayfinder Patient Care Aggregator'
          link https://nhsd-confluence.digital.nhs.uk/x/LUJSMQ 'Confluence page'
          link https://nhsd-confluence.digital.nhs.uk/spaces/NO/pages/827474477/NHSApp+Secondary+Care+API+Adapter#NHSAppSecondaryCareAPIAdapter-Flow 'Processing'
          link https://github.com/NHSDigital/nhsapp-secondary-care-api-adapter 'GitHub repo'
          style { icon tech:csharp }
          secondaryCareAdapterLogic = component 'Secondary Care Adapter Logic' {
            description 'Represents the compute/logic in the Secondary Care Adapter'
            style { icon tech:csharp }
          }
          secondaryCareAdapterAPI = component 'Secondary Care Adapter API' {
            description '''
            `GET /v1/SecondaryCare/summary`
            
            `POST /v1/SecondaryCareReporting`
            '''
            style { icon tech:csharp }
          }
          secondaryCareAdapter.secondaryCareAdapterAPI -> secondaryCareAdapter.secondaryCareAdapterLogic 'Passes incoming requests'
        }

        secondaryCareAdapterNGinx -> secondaryCareAdapter
      }

      gpConnectAdapterPod = container {
        title 'GP Connect Adapter Pod'
        description 'Handles communication with GP Connect services.'
        icon tech:kubernetes
        technology 'Kubernetes'

        gpConnectAdapterNGinx = component {
          title 'GP Connect Adapter NGINX'
          description 'Sidecar container for the GP Connect Adapter.'
          style {
            icon tech:nginx
            color slate
          }
        }

        gpConnectAdapter = container 'GP Connect Adapter' {
          description 'Handles communication with the GP Connect services.'
          link https://github.com/NHSDigital/nhsapp-gpconnect-api-adapter 'GitHub code'
          technology 'C# DotNet Kubernetes Pod'
          style {
            icon tech:csharp
          }

          gpconnectadapterLogic = component {
            title 'GP Connect Adapter Logic'
            description 'Logic in GP Connect Adapter'
            technology 'C# DotNet'
            style {
              icon tech:csharp
            }
          }
          gpconnectadapterAPI = component {
            title 'GP Connect Adapter API'
            description 'Enables the NHS App to access the GP Connect (Patient Facing) FHIR APIs'
            technology 'C# DotNet'
            link https://github.com/NHSDigital/nhsapp-gpconnect-api-adapter?tab=readme-ov-file#api-endpoints 'GitHub Readme file'
            style {
              icon tech:csharp
            }
          }
          gpConnectAdapter.gpconnectadapterAPI -> gpConnectAdapter.gpconnectadapterLogic 'Passes on requests'
        }

        gpConnectAdapterNGinx -> gpConnectAdapter.gpconnectadapterAPI
      }

      pdsAdapterPod = container {
        title 'PDS Adapter Pod'
        description 'Handles communication with PDS.'
        technology 'Kubernetes'
        style {
          icon tech:kubernetes
        }

        pdsAdapterNGinx = component {
          title 'PDS Adapter NGINX'
          description 'Sidecar container for the PDS Adapter.'
          style {
            icon tech:nginx
            color slate
          }
        }

        pdsAdapter = container 'PDS Adapter' {
          description 'Communicates with PDS.'
          technology 'C# DotNet Kubernetes Pod'
          link https://nhsd-confluence.digital.nhs.uk/x/OQB-N 'Confluence page'
          link https://github.com/NHSDigital/nhsapp-pds-api-adapter 'Code repository'

          style {
            icon tech:csharp
          }

          pdsAdapterAPI = component {
            title '''
            PDS Adapter API

            `GET /v1/patient/nominated-pharmacy`
            `POST /v1/patient/nominated-pharmacy`

            '''
            description 'API for the PDS API'
          }

          pdsAdapterLogic = component {
            title 'PDS Adapter Logic'
            description 'Logic in the PDS Adapter'
            technology 'C# DotNet'
            style {
              icon tech:csharp
            }
          }
          pdsAdapterAPI -> pdsAdapterLogic 'Passes on requests'
        }

        pdsAdapterNGinx -> pdsAdapter.pdsAdapterAPI

      }

      nandm = container 'Notifications and Messaging' {
        description 'Handles Patient Messages and Notifications.'
        technology 'C# DotNet Azure Function Apps'
        style {
          icon azure:function-apps
        }

        odsservice = container 'ODS Service' {
          description 'Handles ODS code lookups.'
          style {
            icon tech:csharp
          }
        }

        database = component 'Database' {
          description 'Stores Patient Messages and Notifications.'
          style {
            icon tech:cosmosdb
            shape cylinder
          }
        }
      }

      epsAdapterPod = container {
        title 'EPS Adapter Pod'
        description 'Handles communication with the EPS services.'
        icon tech:kubernetes
        technology 'Kubernetes'

        epsAdapterNGinx = component {
          title 'EPS Adapter NGINX'
          description 'Sidecar container for the EPS Adapter.'
        }

        epsAdapter = container 'EPS Adapter' {
          description 'Handles calls to EPS'
          technology 'C# DotNet Kubernetes Pod'
          style {
            icon tech:csharp
          }

          epsAdapterLogic = component {
            title 'EPS Adapter Logic'
            description 'Logic in the EPS Adapter'
            technology 'C# DotNet'
            style {
              icon tech:csharp
            }
          }

          epsAdapterAPI = component {
            title 'EPS Adapter API'
            description '''
            Enables the NHS App to access the EPS related APIs
            
            `GET https://epsadapterapi.nhsapp.service.nhs.uk/api/v1/prescriptions`

            '''
            technology 'C# DotNet'
            link https://github.com/NHSDigital/nhsapp-eps-api-adapter 'GitHub Repo'
            style {
              icon tech:csharp
            }
          }
          epsAdapter.epsAdapterAPI -> epsAdapter.epsAdapterLogic 'Passes on requests'
        }
        epsAdapterNGinx -> epsAdapter.epsAdapterAPI
      }

      utilAdapterPod = container {
        title 'Utility Adapter Pod'
        description 'Provides Utility services.'
        technology 'Kubernetes'
        style {
          icon tech:kubernetes
        }

        utilAdapterNGinx = component {
          title 'Utility Adapter NGinx'
          description 'Sidecar container for the Utility Adapter.'
          style {
            icon tech:nginx
            color slate
          }
        }

        utilAdapter = container {
          title 'Utility Adapter'
          description '''
          The NHS App Utility Adapter API contains a set of API Endpoints designed to provide standard utility services to the NHS App.
          
          That 'set' of endpoints is currently just one endpoint.
          '''
          technology 'C# DotNet Kubernetes Pod'
          style {
            icon tech:csharp
          }
          utilAdapterEndpoint = component {
            title 'Utility Adapter Endpoint'
            description '''
            The NHS App Utility Adapter API contains a set of API Endpoints designed to provide standard utility services to the NHSApp.
            The only endpoint it provides is to support logging.
            
            `POST api/v1/LogMessage`
            '''
            link https://github.com/NHSDigital/nhsapp-utilities-api-adapter 'GitHub repo'
            link https://nhsd-confluence.digital.nhs.uk/spaces/NO/pages/621850512/NHSApp+Utility+API+Adapter 'Confluence page'
            technology 'C# DotNet'
            style {
              icon tech:csharp
            }
          }

          utilAdapterLogic = component {
            title 'Utility Adapter Logic'
            description 'Processes utility requests.'
            technology 'C# DotNet'
            style {
              icon tech:csharp
            }
          }
        }
        utilAdapterNGinx -> utilAdapter.utilAdapterEndpoint
      }

      eventLogger = container 'Event Logger' {
        description 'The EventLogger solution is designed as a middleware component to the technical landscape and presents a common endpoint that will receive Audit/Analytics OR Logging/exception handle messages. Based on a type, the given messages will be sent to a designated queue for follow on processing. Normally this would be storage and analytics information processing.'
        link https://github.com/NHSDigital/nhsapp-event-logger 'GitHub code'
        link https://nhsd-confluence.digital.nhs.uk/spaces/NO/pages/604902867/Event+Logger+-+User+Guide+-+Developer+Draft 'Confluence page'
        link https://nhsd-confluence.digital.nhs.uk/spaces/NO/pages/604902867/Event+Logger+-+User+Guide+-+Developer+Draft#EventLoggerUserGuide(DeveloperDraft)-Structure 'Structure in Confluence'
        style {
          icon tech:csharp
        }

        component eventLoggerEndpoint 'Event Logger Endpoint' {
          description '''
          The Event Logger Endpoint receives log messages from other components.
          
          `POST /api/v1/AuditEvent`
          '''
          style {
            icon tech:csharp
          }
        }

        component eventLoggerLogic 'Event Logger Logic' {
          description 'Processes log messages and routes them.'
          style {
            icon tech:csharp
          }
        }
      }

      pdmAdapterPod = container {
        title 'PDM Adapter Kubernetes Pod'
        description 'Adapter paired with an NGinx container to talk to PDM'
        technology 'Kubernetes'
        style {
          icon tech:kubernetes
          color red
        }

        pdmNGinx = component {
          title 'NGinx sidecar for PDM Adapter'
          technology 'NGinx - Docker Container'
          style {
            icon tech:nginx
            color red
          }
        }

        pdmAdapter = container {
          title 'Container to talk to PDM'
          technology 'C# DotNet - Docker Container'
          style {
            color red
            icon tech:kubernetes
          }

          pdmAdapterAPI = component {
            title 'PDM Adapter API'
            description '''
            The PDM Adapter API contains a set of API Endpoints designed to provide access to data held in PDM.
            
            `GET /{resource}`
            `POST /{resource}`
            `GET /{resource}/{id}`
            Etc
            '''
            style {
              color red
              icon tech:csharp
            }
          }

          pdmAdapterLogic = component {
            title 'Logic in the PDM Adapter'
            style {
              icon tech:csharp
              color red
            }
          }

          pdmAdapterAPI -> pdmAdapterLogic
        }

        pdmNGinx -> pdmAdapter.pdmAdapterAPI
      }
    }

    utilAdapter.utilAdapterEndpoint -> utilAdapter.utilAdapterLogic {
      title 'Sends received message to be processed'
    }

    utilAdapter.utilAdapterLogic -> eventLogger.eventLoggerEndpoint 
    {
      title 'Sends log messages to'
      description '''
      Sends events To
      
      ``POST /api/v1/AuditEvent``
      '''
    }

    // Relationships
    webApp -[Cookies]-> monolith 'Makes API Calls To' {
      technology 'Secured by Cookies over HTTPS'
    }
    webApp -[Cookies]-> pdsAdapterPod.pdsAdapterNGinx 'Makes API Calls To' {
      technology 'Secured by Cookies over HTTPS'
    }
    webApp -[Cookies]-> gpConnectAdapterPod.gpConnectAdapterNGinx 'Makes API Calls To' {
      description '''
      
      Makes calls to GP Connect using Cookies authentication
      
      `POST /api/v1/AccessRecord`

      '''
    }
    webApp -[Cookies]-> secondaryCareAdapterPod.secondaryCareAdapterNGinx 'Makes API Calls To' {
      technology 'Secured by Cookies over HTTPS'
    }
    webApp -[Bearer-Token]-> nandm 'Makes API Calls To' {
      description 'Makes calls to N&M using Bearer Token authentication'
      technology 'Secured by Bearer Token over HTTPS'
    }
    webApp -[Cookies]-> epsAdapterPod.epsAdapterNGinx 'Makes API Calls To' {
      technology 'Secured by Cookies over HTTPS'
    }
    webApp -[Cookies]-> utilAdapterPod.utilAdapterNGinx 'Makes API Calls To' {
      technology 'Secured by Cookies over HTTPS'
    }
    webApp -[Cookies]-> sessionapi 'Used for session management' {
      description 'POST /v1/session and GET /v1/session'
      link https://nhsd-confluence.digital.nhs.uk/spaces/NO/pages/608909289/Backend+API+-+User+Session+Creation 'Session creation mechanism'
      technology 'REST API Secured by Cookies over HTTPS'
    }
    webApp -[Cookies]-> pfsapi 'Makes API Calls To' {
      description 'Makes API Calls To'
      technology 'REST API Secured by Cookies over HTTPS'
    }
    webApp -[Cookies]->pdmAdapterPod.pdmNGinx {
      title 'Retrieves Any arbitrary FHIR resource'
    }

    NativeApp.androidapp.androidwebview -> webApp 'Hosts'
    NativeApp.iosapp.ioswebview -> webApp 'Hosts'

    // Here are all the links to EMIS using IM1
    monolith.pfsapi -> optum.emisim1pfsappointmentslots 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to get available appointment slots'
      technology 'IM1'
    }
    monolith.pfsapi -> optum.emisim1pfsappointments 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to manage appointments'
      technology 'IM1'
    }
    monolith.pfsapi -> optum.emisim1pfspatientcommsrecipients 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to communicate with patients'
      technology 'IM1'
    }
    monolith.pfsapi -> optum.emisim1pfspatientcommsmessages 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to communicate with patients'
      technology 'IM1'
    }
    monolith.pfsapi -> optum.emisim1pfsgetrecorddemographics 'Makes API Call, GET' {
      description 'GET /demographics\nReturns the known demographic details (including patient identifiers such as NHS or CHI number) of the patient record specified. To change this information please see the /demographicsrequest resource.'
      technology 'IM1'
    }
    monolith.pfsapi -> optum.emisim1pfsgetrecorddemographicsrequests 'Makes API Calls, GET, POST, DELETE' {
      description 'GET /demographicsrequest\n POST /demographicsrequest\n DELETE /demographicsrequest\nA demographics request is any update to the patient record’s demographic details that is still awaiting review and acceptance by a user of the clinical system at the practice. Updates to the patient record demographics must always be reviewed before they can be made a permanent modification to the record.'
      technology 'IM1'
    }
    monolith.pfsapi -> optum.emisim1pfsgetrecorddocuments 'Makes API Calls, GET' {
      description 'GET /documents/:documentGuid\nRetrieves the document content that has been filed in the patient record. Documents are embedded within HTML mark-up, compressed using GZIP and then encoded in base64.
A list of available document guids can be retrieved from the /record resource when specifying the item type of “Documents”. The /record resource also contains the document metadata such as the page length, file-size and file extension. 
EMIS Web is capable of storing multiple document formats, and the API will return the raw data content. Please ensure that it is converted into a viewable format before displaying it to your user.'
      technology 'IM1'
    }
    monolith.pfsapi -> optum.emisim1pfsgetrecordrecords 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to get patient records'
      technology 'IM1'
    }
    monolith.pfsapi -> optum.emisim1pfsgetrecordprescriptioncourses 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to get patient prescription courses'
      technology 'IM1'
    }
    monolith.pfsapi -> optum.emisim1pfsgetrecordprescriptionpharmacies 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to get patient pharmacies'
      technology 'IM1'
    }
    monolith.pfsapi -> optum.emisim1pfsgetrecordprescriptionrequests 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to get prescription requests'
      technology 'IM1'
    }
    monolith.pfsapi -> optum.emisim1pfsusersessionsme 'Makes API Call' {
      description 'GET /me\nPOST/me\nThe me resource relates directly to the ROSU and their account in the clinical system. This resource has no interaction with any patient record. It also controls linking the subsidiary user to the ROSU in EMIS Web.'
      technology 'IM1'
    }
    monolith.pfsapi -> optum.emisim1pfsusersessionspractices 'Makes API Call' {
      description 'GET /practices\nGET /practices/:nationalPracticeCode/meta\nGET /practices/:nationalPracticeCode/settings\nReturns our recorded details of the specified Practice by their postcode. This call can be used in an attempt to verify if a Practice is an EMIS customer.'
      technology 'IM1'
    }
    monolith.pfsapi -> optum.emisim1pfsusersessionssessions 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to get...'
      technology 'IM1'
    }
    monolith.pfsapi -> optum.emisim1pfsusersessionsusers 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to get...'
      technology 'IM1'
    }

    monolith.pfsapi -> tpps1 'Makes API Call' {
      description 'Uses TPP IM1 APIs to get patient records'
      technology 'IM1'
      link https://nhsd-confluence.digital.nhs.uk/spaces/NO/pages/626233388/Example+EMIS+TPP+IM1+API+Responses#ExampleEMIS%2BTPPIM1APIResponses-TPP 'Sample IM1 API responses'
    }
    gpConnectAdapter.gpconnectadapterLogic -> medicus 'Makes API Call' {
      description '''

      Uses GP Connect PFS API to get patient records.
      
      `POST /Patient/$gpc.getstructuredrecord`
      '''
      technology 'GP Connect'
      link https://digital.nhs.uk/developer/api-catalogue/gp-connect-patient-facing-access-record-fhir 'API documentation'
    }

  }

  // NHSE But external to NHS App Systems
  login = system 'NHS login' {
    description 'Handles user authentication and authorization.'
    link https://nhsd-confluence.digital.nhs.uk/x/HMQLB 'Confluence space'
    link https://digital.nhs.uk/services/nhs-login 'Public pages'
    style {
      icon aws:cognito
      color: gray
    }
  }

  pds = system 'PDS' {
    description 'The Personal Demographics Service (PDS) is the national electronic database of NHS patient demographic details.'
    link https://digital.nhs.uk/services/personal-demographics-service 'Public pages'
    style {
      icon tech:amazon-web-services
      color gray
    }

    pdsdatabase = component 'RIAK Database' {
      style {
        color slate
        shape cylinder
      }
    }


    component pdsfhirapi 'PDS FHIR API' {
      description 'The PDS FHIR API provides access to patient demographic details stored in PDS.'
      link https://digital.nhs.uk/services/personal-demographics-service/pds-fhir-api 'Public pages'
      style {
        icon gcp:apigee-api-platform
        color gray
      }


      pdsfhirapiget = component 'Get patient details: GET /Patient/{id}' {
        description 'Use this endpoint to get patient details from PDS for a given NHS number. You cannot get a patients related people details, use the RelatedPerson endpoint instead.'
        link https://digital.nhs.uk/developer/api-catalogue/personal-demographics-service-fhir#get-/Patient/-id- 'Api specification'
      }

      pdsfhirapipatch = component 'Update patient details: PATCH /Patient/{id}' {
        description 'Use this endpoint to update patient details in PDS.'
        link https://digital.nhs.uk/developer/api-catalogue/personal-demographics-service-fhir#patch-/Patient/-id- 'API specification'
      }

    }

    component pdshl7v3api 'PDS HL7v3 API' {
      description 'The PDS HL7v3 API provides access to patient demographic details stored in PDS.'
      link https://data.developer.nhs.uk/dms/mim/6.3.01/Index.htm 'MIM 6.3.01'
      link https://digital.nhs.uk/developer/guides-and-documentation/message-implementation-manuals 'MIM index' 
      style {
        color gray
      }
    }

    pdshl7v3api -> pdsdatabase 'Read from and write to'
    pdsfhirapi -> pdsdatabase 'Read from and write to'
  }

  servicesearch = system 'Service Search' {
    description 'Provides search functionality for NHS services.'
    link https://nhsd-confluence.digital.nhs.uk/x/8YfLB 'Confluence space'
    link https://developer.api.nhs.uk/nhs-api/documentation/service-search-organisations-2 'Service description'
    style {
      icon tech:csharp
      color gray
    }
  }

  wayfinder = system 'Wayfinder Patient Care Aggregator' {
    description 'Provides location and directions to NHS services.'
    link https://nhsd-confluence.digital.nhs.uk/x/8w9xFg 'Confluence space'
    style {
      icon aws:lambda
      color gray
    }
  }

  pfps = system 'Prescriptions for Patients FHIR API' {
    description 'Provides access to patient prescriptions.'
    link https://nhsd-confluence.digital.nhs.uk/x/coRhQ 'Confluence space'
    style {
      icon tech:python
      color gray
    }
  }

  ordapi = system 'ORD API' {
    description 'Provides access to Organisation details'
    link https://nhsd-confluence.digital.nhs.uk/x/1YfLB 'Confluence space'
    style {
      color gray
    }
  }

  odsapi = system 'ODS API' {
      description 'Provides access to Organisation details'
      link https://digital.nhs.uk/developer/api-catalogue/organisation-data-service-fhir 'API Spec'
      link https://directory.spineservices.nhs.uk/STU3/Organization/B86044 'Example response'
      style {
      color gray
      }
  }

  pdm = system {
    title 'PDM'
    description 'The PDM (Patient Data Manager) system is used to store patient data.'
    link https://nhsd-confluence.digital.nhs.uk/x/Xu9uNg 'Confluence space'
    link https://digital.nhs.uk/developer/api-catalogue/patient-data-manager 'Public API spec'
    style {
      icon aws:health-lake
      color red
    }
  }

  // Fully external systems
  GPSystems = system 'GP Systems' {
    description 'Systems used by General Practitioners (GPs) to manage patient records and appointments.'
    style {
      color gray
    }

    optum = system 'Optum (EMIS Web)' {
      description 'A widely used GP system in the UK.'
      link https://www.optum.com/solutions/uk-healthcare/emis-web.html 'Vendor page'
      style { color gray }

      optumIM1PFS = container 'Optum (EMIS Web) IM1 PFS API' {
        description 'Provides access to patient records.'
        link https://nhsd-confluence.digital.nhs.uk/spaces/DCA/pages/950562906/EMIS+PFS+API 'Confluence page'
        style { color gray }

        emisim1pfsapptmanagement = component 'Appointment Management' {
          description 'Handles appointment management.'
          style { color gray }

          emisim1pfsappointments = component 'appointments' {
            description 'GET /appointments\nPOST /appointments\nDELETE /appointments\nThe appointments resource is used to manage the appointments booked for a patient record. Appointments booked are managed per record, however, each ROSU has their own allocation of allowed appointments. This is managed by the Practice.
For example; if the practice stipulates that the maximum number of appointments is 3, then each ROSU attached to a patient record is allowed to have 3 appointments booked for that patient at any one time. Appointments booked via the practice (either over the phone or in person) are not taken into account.'
            
            style { color gray }
          }

          emisim1pfsappointmentslots = component 'appointmentslots' {
            description 'GET /appointmentslots/meta\nGET /appointmentslots\nThe appointmentslots resource is a representation of the available appointment diary held by the practice. Any sessions and slots made available for booking via PFS will be shown here. The resource is split into two individual components, the “metadata” and the slot list. The metadata call can be used to help define a filter when retrieving appointment slots. Sessions may be perceived as appointment slot containers for the purposes of the PFS API.'
            style { color gray }
          }
        }

        emisim1pfspatientcomms = component 'Communicate with Patient' {
          description 'Handles communication with patients.'
          style { color gray }

          emisim1pfspatientcommsrecipients = component 'messagerecipients' {
            description 'Handles recipients of communications.'
            style { color gray }
          }

          emisim1pfspatientcommsmessages = component 'messages' {
            description 'Handles messages.'
            style { color gray }
        }
        }

        emisim1pfsgetrecord = component 'Get Record' {
          description 'Handles retrieval of patient records.'
          style { color gray }

          emisim1pfsgetrecorddemographics = component 'demographics' {
            description 'Handles patient demographics.'
            style { color gray }
          }

          emisim1pfsgetrecorddemographicsrequests = component 'demographicsrequest' {
            description 'Handles requests for patient demographics.'
            style { color gray }
          }

          emisim1pfsgetrecorddocuments = component 'documents' {
            description 'Handles patient documents.'
            style { color gray }
          }

          emisim1pfsgetrecordrecords = component 'record' {
            description 'Handles patient record.'
            style { color gray }
          }

        }

        emisim1pfsprescriptions = component 'Prescriptions' {
          description 'Handles patient prescriptions.'
          style { color gray }

          emisim1pfsgetrecordprescriptioncourses = component 'Courses' {
            description 'Handles prescription courses.'
            style { color gray }
          }

          emisim1pfsgetrecordprescriptionpharmacies = component 'pharmacies' {
            description 'Handles pharmacies.'
            style { color gray }
          }

          emisim1pfsgetrecordprescriptionrequests = component 'prescriptionrequests' {
            description 'Handles prescription requests.'
            style { color gray }

          }
        }

        emisim1pfsusersessions = component 'User and Session Management' {
          description 'Handles user and session management.'
          style { color gray }

          emisim1pfsusersessionsme = component 'me' {
            description 'The me resource relates directly to the ROSU and their account in the clinical system. This resource has no interaction with any patient record. It also controls linking the subsidiary user to the ROSU in EMIS Web.'
            style { color gray }
          }

          emisim1pfsusersessionspractices = component 'practices' {
            description 'Gives details of practice, and services available from that practice.'
            style { color gray }
          }

          emisim1pfsusersessionssessions = component 'sessions' {
            description 'Handles sessions information.'
            style { color gray }
          }

          emisim1pfsusersessionsusers = component 'users' {
            description 'Handles users information.'
            style { color gray }
          }
        }
      }
    }

    tpps1 = system 'TPP SystmOne' {
      description 'A widely used GP system in the UK.'
      link https://www.tpp-uk.com/solutions/systmone/ 'Vendor page'
      style {
        color gray
      }
    }

    medicus = system 'Medicus' {
      description 'A GP system used by some practices in the UK.'
      link https://www.medicus.com/ 'Vendor page'
      style {
        color gray
      }
    }

    user -> iosapp 'Uses'
    user -> androidapp 'Uses'
    user -> webApp 'Uses'
    user -> login 'Uses to authenticate' {
      description 'User authentication is done by NHS login via OAuth 2.0 Authorization Code flow and OpenID Connect.'
      technology 'OAuth 2.0/OpenID Connect'
      link https://datatracker.ietf.org/doc/html/rfc6749 'OAuth 2.0 RFC'
    }
    backend -> login 'Uses to get user identity'
    NativeApp -> login 'Uses to get authenticate users'
    login -> pdsfhirapiget 'Get user details' {
      description '''
      Uses to get user details:
      
      `GET /Patient/{id}`
      '''
      technology 'RESTful FHIR API over HTTPS, OAuth 2.0 Token Exchange'
    }
    login -> pdsfhirapipatch 'Update user details' {
      description '''
      Use this endpoint to get patient details from PDS for a given NHS number.
      This is used in particular to get their P1 Nominated Pharmacy ODS code.

      `PATCH /Patient/{id}`
      '''
      link https://digital.nhs.uk/developer/api-catalogue/personal-demographics-service-fhir#get-/Patient/-id- 'API Catalogue' 
      technology 'RESTful FHIR API over HTTPS, OAuth 2.0 Token Exchange'
    }
    pdsAdapter.pdsAdapterLogic -> pdsfhirapiget 'GET Patient' {
      description '''
      Use this endpoint to get patient details from PDS for a given NHS number.
      This is used in particular to get their P1 Nominated Pharmacy ODS code.

      `GET /Patient/{id}`
      '''
      link https://digital.nhs.uk/developer/api-catalogue/personal-demographics-service-fhir#get-/Patient/-id- 'API Catalogue' 
      technology 'RESTful FHIR API over HTTPS, OAuth 2.0 Token Exchange'
    }
    pdsAdapter.pdsAdapterLogic -> servicesearch 'Uses to search for NHS services'
    secondaryCareAdapter.secondaryCareAdapterLogic -> wayfinder.aggregator.eventService.eventServiceAPI {
      description  'Calls to get secondary care service details for user.'
      technology 'OAuth 2.0 Token Exchange'
    }

    epsAdapter.epsAdapterLogic -> pfps 'Calls to get prescription details for user.' {
      description '''
      Calls the Prescriptions for Patients FHIR API

      `GET /Bundle`
      '''
    }

    odsservice -> ordapi 'Gets Organisation details' {
      description '''
      Uses ODS code to look up Organisation details.

      `GET /ORD/2-0-0/organisations/{ODS Code}`
      '''
      link https://digital.nhs.uk/developer/api-catalogue/organisation-data-service-ord 'API documentation'
    }

    // Provisional for interacting with PDM
    pdmAdapterPod.pdmAdapter.pdmAdapterLogic -> pdm {
      title 'Fetches any FHIR Data from PDM'
      technology 'RESTful FHIR API over HTTPS, OAuth 2.0 Token Exchange'
    }

  }

  AdobeAnalytics = system {
    title 'Adobe Analytics'
    technology 'Adobe Analytics'
    description 'Provides analytics services for the NHS App.'
    link https://business.adobe.com/uk/products/adobe-analytics.html 'Vendor page'
    style {
      color gray
    }
  }

  webApp -> AdobeAnalytics 'Sends analytics data to' {
    description 'Sends anonymized usage data for analysis.'
    technology 'HTTPS'
  }
}