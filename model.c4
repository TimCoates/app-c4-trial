specification {
  element actor
  element system
  element container
  element component
  element webview {
    style {
      shape browser
      color muted
    }
  }
}

model {

  user = actor 'User' {
    description 'A user of the NHS App.'
    style {
      shape person
    }
  }

  // NHS App System
  nhsappservice = system 'NHS App Service' {
    description 'Allows users to access a range of NHS services.'
    link https://nhsd-confluence.digital.nhs.uk/x/f_9xCQ 'Confluence space'

    webApp = container 'Web version of the NHS App' {
      description 'NHS App as viewed in a web browser.'
      technology 'Vue.js, HTML, CSS'
      icon tech:vue
    }  

    NativeApp = container 'Native App' {
      link https://nhsarchitecture.horizzon.cloud/sites/4b53edd4-70ee-451c-af34-7d70040b4d2c/objects/97e39153-6f05-f011-af04-04d3b0c2d3c2 'Object in Aalto'

      androidapp = container 'Native Android App' {
        description 'Native Android App that allows users to access a range of NHS services.'
        link https://github.com/NHSDigital/nhsapp-android 'Code repository'
        style {
          icon tech:kotlin
          shape mobile
        }

        androidapplogic = container 'App Logic' {
          description 'Runs the native app functionality.'
          style {
            icon tech:kotlin
          }
        }

        androidwebview = webview 'Web View' {
          description 'An Andoid WebView component that renders web content within the app.'
          link https://developer.android.com/reference/android/webkit/WebView 'Android WebView documentation'
        }
        androidapplogic -> androidwebview 'Drives' {
          description 'The Android native code instructs the WebView control to load specific URLs. The WebView then displays the web content in the app.'
        }
      }

      iosapp = container 'Native iOS App' {
        description 'Native iOS App that allows users to access a range of NHS services.'
        link https://github.com/NHSDigital/nhsapp-ios 'Code repository'
        style {
          icon tech:swift
          shape mobile
        }

        iosapplogic = container 'App Logic' {
          description 'Runs the native app functionality.'
          style {
            icon tech:swift
          }
        }

        ioswebview = webview 'Web View' {
          description 'An iOS WebView control, that renders web content within the app.'
          link https://developer.apple.com/design/human-interface-guidelines/web-views 'Apple WebView documentation'
        }
        iosapplogic -> ioswebview 'The iOS native code instructs the WebView control to load specific URLs. The WebView then displays the web content in the app.'
      }
    }

    backend = container 'Backend' {
      description 'A collection of components that handle API requests from the Native App and Web App, and communicate with external services.'

      monolith = container 'App backend monolith' {
        description 'Handles App backend calls.'
        link https://github.com/NHSDigital/nhsapp/tree/develop/backendworker 'Code repository'
        style {
          icon tech:csharp
          opacity 10%
        }

        sjrapi = container 'SJR API' {
          description 'Handles retrieval of SJR'
          style {
            icon tech:csharp
          }
        }

        pfsapi = container 'PFS API' {
          description 'Handles interactions with PFS Services'
          link https://github.com/NHSDigital/nhsapp/tree/develop/backendworker/NHSOnline.Backend.PfsApi 'GitHub source code'
          link https://github.com/NHSDigital/nhsapp/blob/3faa38effc8d6afa89d29763185bc841fca67504/backendworker/README.md 'README.md'
          link https://nhsd-confluence.digital.nhs.uk/spaces/NO/pages/583842081/NHS+PFS+-+API+Design#NHSPFSAPIDesign-PFSMonolith 'Confluence description'
          style {
            icon tech:csharp
          }
        }

        sessionapi = container 'Session API' {
          description 'Handles session management'
          style {
            icon tech:csharp
          }
        }

        userinfodevice = component 'Users Info & Devices' {
          description 'Holds user and device information.'
          style {
            icon tech:cosmosdb
            shape cylinder
          }
        }

        sessions = component 'Sessions' {
          description 'Holds session information.'
          style {
            icon tech:cosmosdb
            shape cylinder
          }
        }

        sessionapi -> sessions 'Reads from and writes to database.'
        sessionapi -> userinfodevice 'Reads from and writes to database.'

      }

      secondarycareadapter = container 'Secondary Care Adapter' {
        description 'Handles communication with Wayfinder Patient Care Aggregator'
        link https://nhsd-confluence.digital.nhs.uk/x/LUJSMQ 'Confluence page'
        link https://nhsd-confluence.digital.nhs.uk/spaces/NO/pages/827474477/NHSApp+Secondary+Care+API+Adapter#NHSAppSecondaryCareAPIAdapter-Flow 'Processing'
        link https://github.com/NHSDigital/nhsapp-secondary-care-api-adapter 'GitHub repo'
        style { icon tech:csharp }
        secondarycareadapterlogic = component 'Secondary Care Adapter Logic' {
          description 'Represents the compute/logic in the Secondary Care Adapter'
          style { icon tech:csharp }
        }
        secondarycareadapterapi = component 'Secondary Care Adapter API' {
          description '''
          `GET /v1/SecondaryCare/summary`
          
          `POST /v1/SecondaryCareReporting`
          '''
          style { icon tech:csharp }
        }
        this.secondarycareadapterapi -> this.secondarycareadapterlogic 'Passes incoming requests'
      }

      gpconnectadapter = container 'GP Connect Adapter' {
        description 'Handles communication with the GP Connect services.'
        link https://github.com/NHSDigital/nhsapp-gpconnect-api-adapter 'GitHub code'
        style {
          icon tech:csharp
        }
        gpconnectadapterLogic = component {
          title 'GP Connect Adapter Logic'
          description 'Logic in GP Connect Adapter'
          technology 'C# DotNet'
          style {
            icon tech:csharp
          }
        }
        gpconnectadapterAPI = component {
          title 'GP Connect Adapter API'
          description 'Enables the NHS App to access the GP Connect (Patient Facing) FHIR APIs'
          technology 'C# DotNet'
          link https://github.com/NHSDigital/nhsapp-gpconnect-api-adapter?tab=readme-ov-file#api-endpoints 'GitHub Readme file'
          style {
            icon tech:csharp
          }
        }
        this.gpconnectadapterAPI -> this.gpconnectadapterLogic 'Passes on requests'
      }

      pdsadapter = container 'PDS Adapter' {
        description 'Communicates with PDS.'
        link https://nhsd-confluence.digital.nhs.uk/x/OQB-N 'Confluence page'
        link https://github.com/NHSDigital/nhsapp-pds-api-adapter 'Code repository'

        style {
          icon tech:csharp
        }
      }

      nandm = container 'Notifications and Messaging' {
        description 'Handles Patient Messages and Notifications.'
        style {
          icon tech:csharp
        }

        odsservice = component 'ODS Service' {
          description 'Handles ODS code lookups.'
          style {
            icon tech:csharp
          }
        }

        database = component 'Database' {
          description 'Stores Patient Messages and Notifications.'
          style {
            icon tech:cosmosdb
            shape cylinder
          }
        }
      }

      epsadapter = container 'EPS Adapter' {
        description 'Handles calls to EPS'
        style {
          icon tech:csharp
        }
      }

      utiladapter = container 'Util Adapter' {
        description 'TBC'
        style {
          icon tech:csharp
        }
      }

      eventLogger = container 'Event Logger' {
        description 'TBC'
        style {
          icon tech:csharp
        }
      }
    }

    // Relationships
    webApp -> monolith 'Makes API Calls To'
    webApp -> pdsadapter 'Makes API Calls To'
    webApp -> gpconnectadapter.gpconnectadapterAPI 'Makes API Calls To' {
      description '''
      `POST /api/v1/AccessRecord`

      '''
    }
    webApp -> secondarycareadapter.secondarycareadapterapi 'Makes API Calls To'
    webApp -> nandm 'Makes API Calls To'
    webApp -> epsadapter 'Makes API Calls To'
    webApp -> utiladapter 'Makes API Calls To'
    webApp ->sessionapi 'Uses for session management' {
      description 'POST /v1/session and GET /v1/session'
      link https://nhsd-confluence.digital.nhs.uk/spaces/NO/pages/608909289/Backend+API+-+User+Session+Creation 'Session creation mechanism'
      technology 'REST API over HTTPS'
    }
    webApp -> pfsapi 'Makes API Calls To' {
      description 'Makes API Calls To'
      technology 'REST API over HTTPS'
    }

    pfsapi -> sjrapi 'Makes API Calls To'

    iosapp -> sessionapi 'Uses for session management' {
      description 'POST /v1/session and GET /v1/session'
      link https://nhsd-confluence.digital.nhs.uk/spaces/NO/pages/608909289/Backend+API+-+User+Session+Creation 'Session creation mechanism'
      technology 'REST API over HTTPS'
    }
    androidapp -> sessionapi 'Uses for session management' {
      description 'POST /v1/session and GET /v1/session'
      link https://nhsd-confluence.digital.nhs.uk/spaces/NO/pages/608909289/Backend+API+-+User+Session+Creation 'Session creation mechanism'
      technology 'REST API over HTTPS'
    }
    androidwebview -> webApp 'Hosts'
    ioswebview -> webApp 'Hosts'

    // Here are all the links to EMIS using IM1
    pfsapi -> optum.emisim1pfsappointmentslots 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to get available appointment slots'
      technology 'IM1'
    }
    pfsapi -> optum.emisim1pfsappointments 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to manage appointments'
      technology 'IM1'
    }
    pfsapi -> optum.emisim1pfspatientcommsrecipients 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to communicate with patients'
      technology 'IM1'
    }
    pfsapi -> optum.emisim1pfspatientcommsmessages 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to communicate with patients'
      technology 'IM1'
    }
    pfsapi -> optum.emisim1pfsgetrecorddemographics 'Makes API Call, GET' {
      description 'GET /demographics\nReturns the known demographic details (including patient identifiers such as NHS or CHI number) of the patient record specified. To change this information please see the /demographicsrequest resource.'
      technology 'IM1'
    }
    pfsapi -> optum.emisim1pfsgetrecorddemographicsrequests 'Makes API Calls, GET, POST, DELETE' {
      description 'GET /demographicsrequest\n POST /demographicsrequest\n DELETE /demographicsrequest\nA demographics request is any update to the patient record’s demographic details that is still awaiting review and acceptance by a user of the clinical system at the practice. Updates to the patient record demographics must always be reviewed before they can be made a permanent modification to the record.'
      technology 'IM1'
    }
    pfsapi -> optum.emisim1pfsgetrecorddocuments 'Makes API Calls, GET' {
      description 'GET /documents/:documentGuid\nRetrieves the document content that has been filed in the patient record. Documents are embedded within HTML mark-up, compressed using GZIP and then encoded in base64.
A list of available document guids can be retrieved from the /record resource when specifying the item type of “Documents”. The /record resource also contains the document metadata such as the page length, file-size and file extension. 
EMIS Web is capable of storing multiple document formats, and the API will return the raw data content. Please ensure that it is converted into a viewable format before displaying it to your user.'
      technology 'IM1'
    }
    pfsapi -> optum.emisim1pfsgetrecordrecords 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to get patient records'
      technology 'IM1'
    }
    pfsapi -> optum.emisim1pfsgetrecordprescriptioncourses 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to get patient prescription courses'
      technology 'IM1'
    }
    pfsapi -> optum.emisim1pfsgetrecordprescriptionpharmacies 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to get patient pharmacies'
      technology 'IM1'
    }
    pfsapi -> optum.emisim1pfsgetrecordprescriptionrequests 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to get prescription requests'
      technology 'IM1'
    }
    pfsapi -> optum.emisim1pfsusersessionsme 'Makes API Call' {
      description 'GET /me\nPOST/me\nThe me resource relates directly to the ROSU and their account in the clinical system. This resource has no interaction with any patient record. It also controls linking the subsidiary user to the ROSU in EMIS Web.'
      technology 'IM1'
    }
    pfsapi -> optum.emisim1pfsusersessionspractices 'Makes API Call' {
      description 'GET /practices\nGET /practices/:nationalPracticeCode/meta\nGET /practices/:nationalPracticeCode/settings\nReturns our recorded details of the specified Practice by their postcode. This call can be used in an attempt to verify if a Practice is an EMIS customer.'
      technology 'IM1'
    }
    pfsapi -> optum.emisim1pfsusersessionssessions 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to get...'
      technology 'IM1'
    }
    pfsapi -> optum.emisim1pfsusersessionsusers 'Makes API Call' {
      description 'Uses optum (EMIS Web) IM1 APIs to get...'
      technology 'IM1'
    }

    pfsapi -> tpps1 'Makes API Call' {
      description 'Uses TPP IM1 APIs to get patient records'
      technology 'IM1'
      link https://nhsd-confluence.digital.nhs.uk/spaces/NO/pages/626233388/Example+EMIS+TPP+IM1+API+Responses#ExampleEMIS%2BTPPIM1APIResponses-TPP 'Sample IM1 API responses'
    }
    gpconnectadapter.gpconnectadapterLogic -> medicus 'Makes API Call' {
      description '''

      Uses GP Connect PFS API to get patient records.
      
      `POST /Patient/$gpc.getstructuredrecord`
      '''
      technology 'GP Connect'
      link https://digital.nhs.uk/developer/api-catalogue/gp-connect-patient-facing-access-record-fhir 'API documentation'
    }

  }

  // NHSE But external to NHS App Systems
  login = system 'NHS login' {
    description 'Handles user authentication and authorization.'
    link https://nhsd-confluence.digital.nhs.uk/x/HMQLB 'Confluence space'
    link https://digital.nhs.uk/services/nhs-login 'Public pages'
    style {
      icon aws:cognito
      color: gray
    }
  }

  pds = system 'PDS' {
    description 'The Personal Demographics Service (PDS) is the national electronic database of NHS patient demographic details.'
    link https://digital.nhs.uk/services/personal-demographics-service 'Public pages'
    style {
      icon tech:amazon-web-services
      color gray
    }

    pdsdatabase = component 'RIAK Database' {
      style {
        color slate
        shape cylinder
      }
    }

    component pdsfhirapi 'PDS FHIR API' {
      description 'The PDS FHIR API provides access to patient demographic details stored in PDS.'
      link https://digital.nhs.uk/services/personal-demographics-service/pds-fhir-api 'Public pages'
      style {
        icon tech:amazon-web-services
        color gray
      }

      pdsfhirapiget = component 'Get patient details: GET /Patient/{id}' {
        description 'Use this endpoint to get patient details from PDS for a given NHS number. You cannot get a patients related people details, use the RelatedPerson endpoint instead.'
        link https://digital.nhs.uk/developer/api-catalogue/personal-demographics-service-fhir#get-/Patient/-id- 'Api specification'
      }

      pdsfhirapipatch = component 'Update patient details: PATCH /Patient/{id}' {
        description 'Use this endpoint to update patient details in PDS.'
        link https://digital.nhs.uk/developer/api-catalogue/personal-demographics-service-fhir#patch-/Patient/-id- 'API specification'
      }

    }

    component pdshl7v3api 'PDS HL7v3 API' {
      description 'The PDS HL7v3 API provides access to patient demographic details stored in PDS.'
      style {
        color gray
      }
    }

    pdshl7v3api -> pdsdatabase 'Read from and write to'
    pdsfhirapi -> pdsdatabase 'Read from and write to'
  }

  servicesearch = system 'Service Search' {
    description 'Provides search functionality for NHS services.'
    link https://nhsd-confluence.digital.nhs.uk/x/8YfLB 'Confluence space'
    style {
      icon tech:csharp
      color gray
    }
  }

  wayfinder = system 'Wayfinder Patient Care Aggregator' {
    description 'Provides location and directions to NHS services.'
    link https://nhsd-confluence.digital.nhs.uk/x/8w9xFg 'Confluence space'
    style {
      icon aws:lambda
      color gray
    }
  }

  pfps = system 'Patient Facing Prescription Service' {
    description 'Provides access to patient prescriptions.'
    link https://nhsd-confluence.digital.nhs.uk/x/coRhQ 'Confluence space'
    style {
      icon tech:python
      color gray
    }
  }

  ordapi = system 'ORD API' {
    description 'Provides access to Organisation details'
    link https://nhsd-confluence.digital.nhs.uk/x/1YfLB 'Confluence space'
    style {
      color gray
    }
  }

  // Fully external systems
  GPSystems = system 'GP Systems' {
    description 'Systems used by General Practitioners (GPs) to manage patient records and appointments.'
    style {
      color gray
    }

    optum = system 'Optum (EMIS Web)' {
      description 'A widely used GP system in the UK.'
      link https://www.optum.com/solutions/uk-healthcare/emis-web.html 'Vendor page'
      style { color gray }

      optumIM1PFS = container 'Optum (EMIS Web) IM1 PFS API' {
        description 'Provides access to patient records.'
        link https://nhsd-confluence.digital.nhs.uk/spaces/DCA/pages/950562906/EMIS+PFS+API 'Confluence page'
        style { color gray }

        emisim1pfsapptmanagement = component 'Appointment Management' {
          description 'Handles appointment management.'
          style { color gray }

          emisim1pfsappointments = component 'appointments' {
            description 'GET /appointments\nPOST /appointments\nDELETE /appointments\nThe appointments resource is used to manage the appointments booked for a patient record. Appointments booked are managed per record, however, each ROSU has their own allocation of allowed appointments. This is managed by the Practice.
For example; if the practice stipulates that the maximum number of appointments is 3, then each ROSU attached to a patient record is allowed to have 3 appointments booked for that patient at any one time. Appointments booked via the practice (either over the phone or in person) are not taken into account.'
            
            style { color gray }
          }

          emisim1pfsappointmentslots = component 'appointmentslots' {
            description 'GET /appointmentslots/meta\nGET /appointmentslots\nThe appointmentslots resource is a representation of the available appointment diary held by the practice. Any sessions and slots made available for booking via PFS will be shown here. The resource is split into two individual components, the “metadata” and the slot list. The metadata call can be used to help define a filter when retrieving appointment slots. Sessions may be perceived as appointment slot containers for the purposes of the PFS API.'
            style { color gray }
          }
        }

        emisim1pfspatientcomms = component 'Communicate with Patient' {
          description 'Handles communication with patients.'
          style { color gray }

          emisim1pfspatientcommsrecipients = component 'messagerecipients' {
            description 'Handles recipients of communications.'
            style { color gray }
          }

          emisim1pfspatientcommsmessages = component 'messages' {
            description 'Handles messages.'
            style { color gray }
        }
        }

        emisim1pfsgetrecord = component 'Get Record' {
          description 'Handles retrieval of patient records.'
          style { color gray }

          emisim1pfsgetrecorddemographics = component 'demographics' {
            description 'Handles patient demographics.'
            style { color gray }
          }

          emisim1pfsgetrecorddemographicsrequests = component 'demographicsrequest' {
            description 'Handles requests for patient demographics.'
            style { color gray }
          }

          emisim1pfsgetrecorddocuments = component 'documents' {
            description 'Handles patient documents.'
            style { color gray }
          }

          emisim1pfsgetrecordrecords = component 'record' {
            description 'Handles patient record.'
            style { color gray }
          }

        }

        emisim1pfsprescriptions = component 'Prescriptions' {
          description 'Handles patient prescriptions.'
          style { color gray }

          emisim1pfsgetrecordprescriptioncourses = component 'Courses' {
            description 'Handles prescription courses.'
            style { color gray }
          }

          emisim1pfsgetrecordprescriptionpharmacies = component 'pharmacies' {
            description 'Handles pharmacies.'
            style { color gray }
          }

          emisim1pfsgetrecordprescriptionrequests = component 'prescriptionrequests' {
            description 'Handles prescription requests.'
            style { color gray }

          }
        }

        emisim1pfsusersessions = component 'User and Session Management' {
          description 'Handles user and session management.'
          style { color gray }

          emisim1pfsusersessionsme = component 'me' {
            description 'The me resource relates directly to the ROSU and their account in the clinical system. This resource has no interaction with any patient record. It also controls linking the subsidiary user to the ROSU in EMIS Web.'
            style { color gray }
          }

          emisim1pfsusersessionspractices = component 'practices' {
            description 'Gives details of practice, and services available from that practice.'
            style { color gray }
          }

          emisim1pfsusersessionssessions = component 'sessions' {
            description 'Handles sessions information.'
            style { color gray }
          }

          emisim1pfsusersessionsusers = component 'users' {
            description 'Handles users information.'
            style { color gray }
          }
        }
      }
    }

    tpps1 = system 'TPP SystmOne' {
      description 'A widely used GP system in the UK.'
      link https://www.tpp-uk.com/solutions/systmone/ 'Vendor page'
      style {
        color gray
      }
    }

    medicus = system 'Medicus' {
      description 'A GP system used by some practices in the UK.'
      link https://www.medicus.com/ 'Vendor page'
      style {
        color gray
      }
    }

    user -> iosapp 'Uses'
    user -> androidapp 'Uses'
    user -> webApp 'Uses'
    user -> login 'Uses to authenticate' {
      description 'User authentication is done by NHS login via OAuth 2.0 Authorization Code flow and OpenID Connect.'
      technology 'OAuth 2.0/OpenID Connect'
      link https://datatracker.ietf.org/doc/html/rfc6749 'OAuth 2.0 RFC'
    }
    backend -> login 'Uses to get user identity'
    NativeApp -> login 'Uses to get authenticate users'
    login -> pdsfhirapiget 'Uses to get user details: GET /Patient/{id}' {
      technology 'REST FHIR API over HTTPS'
    }
    login -> pdsfhirapipatch 'Uses to update user details: PATCH /Patient/{id}'  {
      technology 'REST FHIR API over HTTPS'
    }
    pdsadapter -> pdsfhirapiget 'GET Patient'
    pdsadapter -> servicesearch 'Uses to search for NHS services'
    secondarycareadapter.secondarycareadapterlogic -> wayfinder.aggregator.eventService.eventServiceAPI {
      description  'Calls to get secondary care service details for user.'
      technology 'OAuth 2.0 Token Exchange'
    }
    epsadapter -> pfps 'Calls to get prescription details for user.'
    odsservice -> ordapi 'Makes API Call' {
      description 'Uses ORD API to look up ODS codes.'
      link https://digital.nhs.uk/developer/api-catalogue/organisation-data-service-ord 'API documentation'
    }

  }
}
