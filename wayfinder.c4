specification {
    tag PEP
    tag TokenExchange
    element PEP {

    #PEP
    notation "Patient Engagement Platform"
    notation "mTLS"
    notation "OIDC"
    notation "MFA"
    notation "API Key"
    notation "OAuth 2.0 Client Credentials"
    notation "OAuth 2.0 Token Exchange"
    style {
        shape rectangle
        color gray
        icon ./External.png
    }
  }
}
// Here we define the details of Wayfinder a bit more
model {

    PEPS = container {
        #PEP
        PKB = PEP { title 'PKB (Patient Knows Best)' }
        Accurx = PEP { title 'AccuRX' }
        DrDr = PEP { title 'DrDr' }
        PathEKS = PEP { title 'PathEKS' }
        EPIC = PEP { title 'Epic (x9)' style { multiple true } }
        HealthCall = PEP { title 'Healthcall' }
        Interweave = PEP { title 'Interweave' }
        Maia = PEP { title 'Maia (Formerly Mindwave)' }
        Morecambe = PEP { title 'Morecambe Bay' }
        Netcall = PEP { title 'Netcall' }
        Orion = PEP { title 'Orion' }
        Tameside = PEP { title 'Tameside & Glossop' }
        Wellola = PEP { title 'Wellola' }
        Zesty = PEP { title 'Zesty' }
    }


    // wayfinder is defined in model.c4
    extend wayfinder {

        // extend and define wayfinder.aggregator
        aggregator = container 'Patient Care Aggregator' {
            description 'Patient Care aggregator microservice'
            technology 'Node.JS Lambda Functions'
            style {
                color gray
            }

            apimProxy = container 'API Proxy' {
                icon gcp:apigee-api-platform
            }
        
            recordService = container 'Record Service' {
                description 'Service to identify which Services have Secondary Care records for a given patient'
                style {
                    color gray
                }

                recordServiceAPI = component 'Record Service API' {
                    description 'API for PEPs to submit NHS Numbers to the Record Service'
                    technology 'Node.JS Lambda Functions'
                    style {
                        icon aws:lambda
                        color gray
                    }
                }

                recordServiceLogic = component 'Record Service Logic' {
                    description 'Logic to handle requeststo the Record Service'
                    technology 'Node.JS Lambda Functions'
                    style {
                        icon aws:lambda
                        color gray
                    }
                }

                recordServiceDB = component 'Record Database' {
                    description 'DynamoDB table to store which Services have Secondary Care records for a given patient'
                    technology 'Amazon DocumentDB'
                    style {
                        icon aws:document-db
                        color gray
                    }
                }
            }

            eventService = container 'Event Service' {
                eventServiceAPI = component 'Event Service API' {}
                eventServiceLogic = component 'Event Service Logic' {
                    description 'Business Logic for the Event Service'
                    technology 'Node.JS Lambda Functions'
                    style {
                        icon aws:lambda
                        color gray
                    }
                }
                cache = component 'ODS Cache' {
                    technology 'Redis'
                    style {
                        icon tech:redis
                    }
                }

                eventServiceLogic -> cache 'Cache data'
            }

        }

    }

    apimProxy -> eventService.eventServiceAPI 'Get Patient Info Data' {
        #TokenExchange
        description '''
        Gets:

        - Referral data
        - Waiting List data* Documents
        - Questionnaires
        - PIFU data
        
        for a given patient
        '''
    }
    eventServiceAPI -> eventServiceLogic 'Passes on request'
    eventServiceLogic -> recordServiceAPI 'Uses'
    eventService.eventServiceLogic -> odsapi 'Lookup Organisation details' { technology 'Not Authenticated' }
    recordServiceAPI -> recordServiceLogic 'Passes requests to'
    recordServiceLogic -> recordServiceDB 'Reads from\nWrites to'

    PKB -> recordServiceAPI 'Submit Patient identities' { technology 'API Key'}
    Accurx -> recordServiceAPI 'Submit Patient identities' { technology 'API Key'}
    DrDr -> recordServiceAPI 'Submit Patient identities' { technology 'API Key'}
    PathEKS -> recordServiceAPI 'Submit Patient identities' 'PathEKS (East Kent)' { technology 'API Key'}
    EPIC -> recordServiceAPI 'Submit Patient identities' { technology 'API Key'}
    HealthCall -> recordServiceAPI 'Submit Patient identities' { technology 'API Key'}
    Interweave -> recordServiceAPI 'Submit Patient identities' { technology 'API Key'}
    Maia -> recordServiceAPI 'Submit Patient identities' 'Maia (formerly known as Mindwave)' { technology 'API Key'}
    Morecambe -> recordServiceAPI 'Submit Patient identities' 'Morecambe Bay' { technology 'API Key'}
    Netcall -> recordServiceAPI 'Submit Patient identities' { technology 'API Key'}
    Orion -> recordServiceAPI 'Submit Patient identities' { technology 'API Key'}
    Tameside -> recordServiceAPI 'Submit Patient identities' 'Tameside & Glossop' { technology 'API Key'}
    Wellola -> recordServiceAPI 'Submit Patient identities' { technology 'API Key' }
    Zesty -> recordServiceAPI 'Submit Patient identities' { technology 'API Key' }

    eventServiceAPI -> PKB 'Fetch Patient records' { technology 'OAuth 2.0 Client Credentials'}
    eventServiceAPI -> Accurx 'Fetch Patient records' { technology 'OAuth 2.0 Client Credentials'}
    eventServiceAPI -> DrDr 'Fetch Patient records' { technology 'OAuth 2.0 Client Credentials'}
    eventServiceAPI -> PathEKS 'Fetch Patient records' { technology 'OAuth 2.0 Client Credentials'}
    eventServiceAPI -> EPIC 'Fetch Patient records' { technology 'OAuth 2.0 Client Credentials'}
    eventServiceAPI -> HealthCall 'Fetch Patient records' { technology 'OAuth 2.0 Client Credentials'}
    eventServiceAPI -> Interweave 'Fetch Patient records' { technology 'OAuth 2.0 Client Credentials'}
    eventServiceAPI -> Maia 'Fetch Patient records' { technology 'OAuth 2.0 Client Credentials'}
    eventServiceAPI -> Morecambe 'Fetch Patient records' { technology 'OAuth 2.0 Client Credentials'}
    eventServiceAPI -> Netcall 'Fetch Patient records' { technology 'OAuth 2.0 Client Credentials'}
    eventServiceAPI -> Orion 'Fetch Patient records' { technology 'OAuth 2.0 Client Credentials'}
    eventServiceAPI -> Tameside 'Fetch Patient records' { technology 'OAuth 2.0 Client Credentials'}
    eventServiceAPI -> Wellola 'Fetch Patient records' { technology 'OAuth 2.0 Client Credentials'}
    eventServiceAPI -> Zesty 'Fetch Patient records' { technology 'OAuth 2.0 Client Credentials'}

}

views 'Wayfinder' {
    
    view wfindex of wayfinder {
        title '01 Overview'
        description 'An initial very high level diagram, showing how Wayfinder is structured.'
        include *
        include PEPS
        include odsapi
    }

    view wfaggregator of wayfinder.aggregator {
        title '02 Aggregator'
        description 'The Record Service is used to identify which Services have Secondary Care records for a given patient.'
        include wayfinder.**
        include odsapi
    }

    view wfrecordService of wayfinder.aggregator.recordService {
        title '03 Record Service'
        description 'The Record Service is used to identify which Services have Secondary Care records for a given patient.'
        include wayfinder.recordService, wayfinder.recordService.recordServiceAPI, wayfinder.recordService.recordServiceDB, wayfinder.aggregator
        include PEPS
    }

    view wfEventService of wayfinder.aggregator {
        title '04 Event Service'
        include *
    }
}